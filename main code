import socket
import threading
from queue import Queue
import re

# Regular expressions for IP and port input validation
IPformat = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
port_range_pattern = re.compile("([0-9]+)-([0-9]+)")

print("""**************************************************************************************")
  _   _     _                                  _
  /_\ | |__ | |__   __ _ ___   _ __   ___  _ __| |_   ___  ___ __ _ _ __  _ __   ___ _ __
 //_\\| '_ \| '_ \ / _` / __| | '_ \ / _ \| '__| __| / __|/ __/ _` | '_ \| '_ \ / _ \ '__|
/  _  \ |_) | |_) | (_| \__ \ | |_) | (_) | |  | |_  \__ \ (_| (_| | | | | | | |  __/ |
\_/ \_/_.__/|_.__/ \__,_|___/ | .__/ \___/|_|   \__| |___/\___\__,_|_| |_|_| |_|\___|_|
                              |_|
*********************************************************************************************""")

queue = Queue()   #storing ports to be scanned here
open_ports = []   # this list is empty becase open ports will be stored here

while True:
    target = input('Enter the target IP or Host: ')
    if IPformat.search(target):
        print(target, 'is a valid target')
        break

def portscan(port):
    try:
        #here were creating a socket. making it clear that the socket is an internet socket not UNIX. Socket.SOCK_STREAM means were using TCP instead of UDP
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        #when using 'connect' we need to use a tuple which will be the IP adress and port. we can pass through the port but must define the target
        #Creates TCP connection with target on the particular port
        sock.connect((target, port))
        sock.close()
        return True
    except:
        return False

def fill_queue(port_list):
    for port in port_list:
        queue.put(port)  #putting each port in the queue

def worker():
    while not queue.empty():
        port = queue.get()
        if portscan(port): #using portscan function to check if ports are open
            print("Port {} is open!".format(port))
            open_ports.append(port) #adding the port to the empty open ports list if it is open

port_list = range(1, 1025)  # Scanning ports from 1 to 1024
fill_queue(port_list) #filling the queue with portlist which are the ports to be scanned
thread_list = [] #empty list to store worker threads

#making 100 worker threads
for _ in range(100):
    thread = threading.Thread(target=worker) #assigning thread to worker function after creation
    thread_list.append(thread)

for thread in thread_list:
    thread.start()

for thread in thread_list:
    thread.join()

print("Open ports: ", open_ports) #printing list of open ports
